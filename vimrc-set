" ==================== Defaults ==============================
" let mapleader=" "
" nnoremap <Space> <nop>
let mapleader=","

set hidden
set history=1000
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set synmaxcol=512
set backspace=2
set nu
set nofoldenable
set backupcopy=yes
set clipboard=unnamed
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

set backup                  " Backups are nice ...
if has('persistent_undo')
  set undofile                " So is persistent undo ...
  set undolevels=1000         " Maximum number of changes that can be undone
  set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
endif

set ignorecase
set smartcase

set mouse=a

" ===================== Vim UI ==============================
set cursorline                  " Highlight current line
set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode
set cursorline                  " Highlight current line
highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same background color in relative mode
set number                      " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too

if has('nvim')
  " fix nvim terminal mode missing cursor
  hi! link TermCursor Cursor
  hi TermCursorNC ctermfg=235 ctermbg=242 guifg=#002b36 guibg=#586e75 guisp=NONE cterm=NONE gui=NONE
endif

" ==================== Swap files ============================
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" ==================== Vim status line ========================
" set laststatus=2
" set statusline=%<%f\                     " Filename
" set statusline+=%w%h%m%r                 " Options
" set statusline+=%{fugitive#statusline()} " Git Hotness
" set statusline+=\ [%{&ff}/%Y]            " Filetype
" set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info

" ==================== Trim whitespaces ======================
autocmd BufWritePre * %s/\s\+$//e

" ==================== stupid shift key fixes ======================
command! -bang -nargs=* -complete=file E e<bang> <args>
command! -bang -nargs=* -complete=file W noautocmd w<bang> <args> <bar>e " 保存不触发beautify，并且reload一次file
command! -bang -nargs=* -complete=file Wq wq<bang> <args>
command! -bang -nargs=* -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>

" ==================== clipboard ====================
let g:clipboard = {
  \ 'name': 'pbcopy',
  \ 'copy': {
  \    '+': 'pbcopy',
  \    '*': 'pbcopy',
  \  },
  \ 'paste': {
  \    '+': 'pbpaste',
  \    '*': 'pbpaste',
  \ },
  \ 'cache_enabled': 0,
  \ }

" ==================== nerdtree ===================
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
let g:nerdtree_tabs_open_on_gui_startup=0

" ==================== ctrlsf.vim ===================
let g:ctrlsf_ackprg = 'rg'
let g:ctrlsf_auto_focus = {
    \ "at": "done",
    \ "duration_less_than": 1000
    \ }

" ==================== crtlp ===================
let g:ctrlp_working_path_mode = 'ra'

if executable('rg')
  set grepprg=rg\ --color=never
  let s:ctrlp_fallback = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
elseif executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let s:ctrlp_fallback = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
else
  let s:ctrlp_fallback = 'find %s -type f'
endif

let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$',
      \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
if exists("g:ctrlp_user_command")
  unlet g:ctrlp_user_command
endif

let g:ctrlp_user_command = {
      \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ 'fallback': s:ctrlp_fallback
      \ }

" ==================== nerdcommenter ======================
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" ==================== vim-fugitive ===================
" set diff views vertical
set diffopt+=vertical

" ==================== emmet-vim ======================
let g:user_emmet_settings = {
\   'javascript.jsx' : {
\     'extends' : 'jsx',
\   },
\   'wxss': {
\     'extends': 'css',
\   },
\   'wxml': {
\     'extends': 'html',
\     'aliases': {
\       'div': 'view',
\       'span': 'text',
\     },
\    'default_attributes': {
\       'block': [{'wx:for-items': '{{list}}','wx:for-item': '{{item}}'}],
\       'navigator': [{'url': '', 'redirect': 'false'}],
\       'scroll-view': [{'bindscroll': ''}],
\       'swiper': [{'autoplay': 'false', 'current': '0'}],
\       'icon': [{'type': 'success', 'size': '23'}],
\       'progress': [{'precent': '0'}],
\       'button': [{'size': 'default'}],
\       'checkbox-group': [{'bindchange': ''}],
\       'checkbox': [{'value': '', 'checked': ''}],
\       'form': [{'bindsubmit': ''}],
\       'input': [{'type': 'text'}],
\       'label': [{'for': ''}],
\       'picker': [{'bindchange': ''}],
\       'radio-group': [{'bindchange': ''}],
\       'radio': [{'checked': ''}],
\       'switch': [{'checked': ''}],
\       'slider': [{'value': ''}],
\       'action-sheet': [{'bindchange': ''}],
\       'modal': [{'title': ''}],
\       'loading': [{'bindchange': ''}],
\       'toast': [{'duration': '1500'}],
\       'audio': [{'src': ''}],
\       'video': [{'src': ''}],
\       'image': [{'src': '', 'mode': 'scaleToFill'}],
\     }
\   },
\}

" ==================== deoplete ======================
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
" let g:deoplete#enable_yarp = 1

" ==================== multiple_cursor & neocomplete ======================
" default maps Ctrl-n, Ctrl-p, Ctrl-x, and <Esc>
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  let g:deoplete#disable_auto_complete = 1
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  let g:deoplete#disable_auto_complete = 0
endfunction

" ==================== neosnippet ===================
let g:neosnippet#enable_completed_snippet = 1
" Use honza's snippets.
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" Enable neosnippet snipmate compatibility mode
let g:neosnippet#enable_snipmate_compatibility = 1

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Enable neosnippets when using go
let g:go_snippet_engine = "neosnippet"

" Disable the neosnippet preview candidate window
" When enabled, there can be too much visual noise
" especially when splits are used.
set completeopt-=preview

" ==================== ale ======================
let g:ale_sign_column_always = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = 'never'
" stop linters to run on opening a file
" let g:ale_lint_on_enter = 0
" ==================== vim-vue ======================
autocmd FileType vue syntax sync fromstart
set suffixesadd+=.vue "gf自动跳转.vue后缀文件
let g:vue_disable_pre_processors=1

" ==================== vim-go ======================
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:go_snippet_case_type = 'camelcase'
let g:go_fmt_command = "goimports" " 自动import packages

augroup go
  autocmd!
  " Show by default 4 spaces for a tab
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
  " 为当前cursor的结构实现某接口
  autocmd Filetype go nmap <space>gl :GoImpl<CR>
  " 显示当前package所有的类型和方法的声明
  autocmd Filetype go nmap <space>gf :GoDecls<CR>
  autocmd Filetype go nmap <space>gF :GoDeclsDir<CR>
  autocmd FileType go nmap <space>gb <Plug>(go-build)
  autocmd FileType go nmap <space>gr <Plug>(go-run)
  autocmd FileType go nmap <space>gd <Plug>(go-doc)
  autocmd FileType go nmap <space>gi <Plug>(go-info)
augroup END

augroup wxs
  au BufRead,BufNewFile *.wxs setlocal filetype=javascript
augroup END

" ==================== vim-jsx ======================
let g:jsx_ext_required = 0

" ==================== js-prettier ======================
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.vue Prettier
" max line length that prettier will wrap on
" Prettier default: 80
let g:prettier#config#print_width = 120

" number of spaces per indentation level
" Prettier default: 2
let g:prettier#config#tab_width = 2

" use tabs over spaces
" Prettier default: false
let g:prettier#config#use_tabs = 'false'

" print semicolons
" Prettier default: true
let g:prettier#config#semi = 'true'

" single quotes over double quotes
" Prettier default: false
let g:prettier#config#single_quote = 'true'

" print spaces between brackets
" Prettier default: true
let g:prettier#config#bracket_spacing = 'true'

" put > on the last line instead of new line
" Prettier default: false
let g:prettier#config#jsx_bracket_same_line = 'true'

" avoid|always
" Prettier default: avoid
let g:prettier#config#arrow_parens = 'avoid'

" none|es5|all
" Prettier default: none
let g:prettier#config#trailing_comma = 'all'

" flow|babylon|typescript|css|less|scss|json|graphql|markdown
" Prettier default: babylon
" let g:prettier#config#parser = 'babylon'

" cli-override|file-override|prefer-file
let g:prettier#config#config_precedence = 'prefer-file'

" always|never|preserve
let g:prettier#config#prose_wrap = 'preserve'

" ==================== vim wiki ======================
" Toggle checkbox of a list item on/off
nmap <leader>wl <Plug>VimwikiToggleListItem
" 标记为完成的 checklist 项目会有特别的颜色
let g:vimwiki_hl_cb_checked = 1
" 是否在计算字串长度时用特别考虑中文字符
let g:vimwiki_CJK_length = 1
" 设置完成的标记符号
let g:vimwiki_listsyms = '✗.○●✓'
" 可以导出markdown?"
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" ==================== henrik/vim-indexed-search ====================
let g:indexed_search_numbered_only = 1
let g:indexed_search_colors = 0

" ==================== init backup & views ======================
" Initialize directories {
function! InitializeDirectories()
    let parent = $HOME
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'undo': 'undodir',
                \ 'swap': 'directory' }
    " add views if you need it
    " \ 'views': 'viewdir',

    " Specify a directory in which to place the vimbackup,
    " vimviews, vimundo, and vimswap files/directories
    let common_dir = parent . '/.vim/'

    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()
" test undo!
