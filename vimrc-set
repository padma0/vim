" ==================== Defaults ==============================
let mapleader=","

set hidden
set history=1000
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set synmaxcol=512
set backspace=2
set nu
set nofoldenable
set backupcopy=yes
lang zh_TW.UTF-8
set clipboard=unnamed
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

set backup                  " Backups are nice ...
if has('persistent_undo')
  set undofile                " So is persistent undo ...
  set undolevels=1000         " Maximum number of changes that can be undone
  set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
endif

set ignorecase
set smartcase

set mouse=a

" ===================== Vim UI ==============================
set cursorline                  " Highlight current line
set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode
set cursorline                  " Highlight current line
highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same background color in relative mode
set number                      " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
" set wildmenu                    " Show list instead of just completing
" set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
" set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too

if has('nvim')
  " fix nvim terminal mode missing cursor
  hi! link TermCursor Cursor
  hi TermCursorNC ctermfg=235 ctermbg=242 guifg=#002b36 guibg=#586e75 guisp=NONE cterm=NONE gui=NONE
endif

" ==================== Swap files ============================
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" ==================== Trim whitespaces ======================
autocmd BufWritePre * %s/\s\+$//e

" ==================== stupid shift key fixes ======================
command! -bang -nargs=* -complete=file E e<bang> <args>
command! -bang -nargs=* -complete=file W w<bang> <args>
" command! -bang -nargs=* -complete=file W noautocmd w<bang> <args> <bar>e " 保存不触发beautify，并且reload一次file
command! -bang -nargs=* -complete=file Wq wq<bang> <args>
command! -bang -nargs=* -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>

" ==================== direnv ======================
au BufRead,BufNewFile {.envrc,_bash*} set filetype=sh

" ==================== clipboard ====================
let g:clipboard = {
  \ 'name': 'pbcopy',
  \ 'copy': {
  \    '+': 'pbcopy',
  \    '*': 'pbcopy',
  \  },
  \ 'paste': {
  \    '+': 'pbpaste',
  \    '*': 'pbpaste',
  \ },
  \ 'cache_enabled': 0,
  \ }

" ==================== sneak.vim ===================
map f <Plug>Sneak_s
map F <Plug>Sneak_S

" ==================== nerdtree ===================
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
let g:nerdtree_tabs_open_on_gui_startup=0

" ==================== ctrlsf.vim ===================
let g:ctrlsf_ackprg = 'rg'
let g:ctrlsf_auto_focus = {
    \ "at": "done",
    \ "duration_less_than": 1000
    \ }

" ==================== crtlp ===================
let g:ctrlp_working_path_mode = 'ra'

if executable('rg')
  set grepprg=rg\ --color=never
  let s:ctrlp_fallback = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
else
  let s:ctrlp_fallback = 'find %s -type f'
endif

let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$',
      \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
if exists("g:ctrlp_user_command")
  unlet g:ctrlp_user_command
endif

let g:ctrlp_user_command = {
      \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ 'fallback': s:ctrlp_fallback
      \ }

" ==================== nerdcommenter ======================
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" ==================== vim-fugitive ===================
" set diff views vertical
set diffopt+=vertical

" ==================== vim-vue ======================
" autocmd FileType vue syntax sync fromstart
" set suffixesadd+=.vue "gf自动跳转.vue后缀文件
" let g:vue_disable_pre_processors=1

" ---------------------------------------------------
" coc.nvim default settings
" ---------------------------------------------------

" Better display for messages
" set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" ==================== vim-go ======================
" let g:go_auto_sameids = 1
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:go_snippet_case_type = 'camelcase'
let g:go_fmt_command = "goimports" " 自动import packages
" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
let g:go_def_mapping_enabled = 0

let g:go_term_enabled = 1
let g:go_term_mode = "vsplit"

augroup go
  autocmd!
  " Show by default 4 spaces for a tab
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
  " 为当前cursor的结构实现某接口
  autocmd Filetype go nmap <space>gl :GoImpl<CR>
  " 显示当前package所有的类型和方法的声明
  autocmd Filetype go nmap <space>gf :GoDecls<CR>
  autocmd Filetype go nmap <space>gF :GoDeclsDir<CR>
  autocmd FileType go nmap <space>gb <Plug>(go-build)
  autocmd FileType go nmap <space>gr <Plug>(go-run)
  autocmd FileType go nmap <space>gd <Plug>(go-doc)
  autocmd FileType go nmap <space>gi <Plug>(go-info)
  autocmd FileType go nmap <space>gt :GoTestFunc<CR>
augroup END

" ==================== vim-jsx ======================
" let g:jsx_ext_required = 0

" =========== javascript-libraries-syntax ==========
" let g:used_javascript_libs = 'underscore,react,vue'

" ==================== vim wiki ======================
" Toggle checkbox of a list item on/off
nmap <leader>wl <Plug>VimwikiToggleListItem
" 标记为完成的 checklist 项目会有特别的颜色
let g:vimwiki_hl_cb_checked = 1
" 是否在计算字串长度时用特别考虑中文字符
let g:vimwiki_CJK_length = 1
" 设置完成的标记符号
let g:vimwiki_listsyms = '✗.○●✓'
" 可以导出markdown?"
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" ==================== henrik/vim-indexed-search ====================
let g:indexed_search_numbered_only = 1
let g:indexed_search_colors = 0

" ==================== mhinz/vim-mix-format ====================
let g:mix_format_on_save = 1
let g:mix_format_silent_errors = 1

" ==================== vim-http ==========================
au BufRead,BufNewFile *.http set splitright
let g:vim_http_split_vertically = 1
let g:vim_http_tempbuffer = 1

" ==================== init backup & views ======================
" Initialize directories {
function! InitializeDirectories()
    let parent = $HOME
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'undo': 'undodir',
                \ 'swap': 'directory' }
    " add views if you need it
    " \ 'views': 'viewdir',

    " Specify a directory in which to place the vimbackup,
    " vimviews, vimundo, and vimswap files/directories
    let common_dir = parent . '/.vim/'

    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()
" test undo!
