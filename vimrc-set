" ==================== Defaults ==============================
" let mapleader=" "
" nnoremap <Space> <nop>
let mapleader=","

syntax on
set hidden
set history=1000
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set synmaxcol=512
set backspace=2
set nu
set nofoldenable
set backupcopy=yes
set clipboard=unnamed
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

set backup                  " Backups are nice ...
if has('persistent_undo')
  set undofile                " So is persistent undo ...
  set undolevels=1000         " Maximum number of changes that can be undone
  set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
endif

set ignorecase
set smartcase

set mouse=a

" ===================== Vim UI ==============================
set cursorline                  " Highlight current line
set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode
set cursorline                  " Highlight current line
highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same background color in relative mode
set number                      " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too

" ==================== Swap files ============================
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" ==================== Vim status line ========================
set laststatus=2
set statusline=%<%f\                     " Filename
set statusline+=%w%h%m%r                 " Options
set statusline+=%{fugitive#statusline()} " Git Hotness
set statusline+=\ [%{&ff}/%Y]            " Filetype
set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info

" ==================== Trim whitespaces ======================
autocmd BufWritePre * %s/\s\+$//e

" ==================== stupid shift key fixes ======================
command! -bang -nargs=* -complete=file E e<bang> <args>
command! -bang -nargs=* -complete=file W w<bang> <args>
command! -bang -nargs=* -complete=file Wq wq<bang> <args>
command! -bang -nargs=* -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>

" ==================== nerdcommenter ======================
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" ==================== emmet-vim ======================
let g:user_emmet_settings = {
\    'javascript.jsx' : {
\     'extends' : 'jsx',
\   },
\}

" ==================== deoplete ======================
let g:deoplete#enable_at_startup = 1
let g:neosnippet#enable_completed_snippet = 1
let g:deoplete#enable_yarp = 1

" ==================== OmniComplete ===================
" To disable omni complete, add the following to the top of this file:
" let no_omni_complete = 1
if !exists('no_omni_complete')
    if has("autocmd") && exists("+omnifunc")
        autocmd Filetype *
            \if &omnifunc == "" |
            \setlocal omnifunc=syntaxcomplete#Complete |
            \endif
    endif

    " set background color of popup menus
    hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
    hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
    hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

    " Some convenient mappings
    " inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
    " inoremap <expr> <CR>     pumvisible() ? "\<C-y>" : "\<CR>"
    inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
    inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
    inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
    inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

    " Automatically open and close the popup menu / preview window
    au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
    set completeopt=menu,preview,longest
endif

" ==================== multiple_cursor & neocomplete ======================
" default maps Ctrl-n, Ctrl-p, Ctrl-x, and <Esc>
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  let g:deoplete#disable_auto_complete = 1
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  let g:deoplete#disable_auto_complete = 0
endfunction

" ==================== neosnippet ===================
" Use honza's snippets.
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" Enable neosnippet snipmate compatibility mode
let g:neosnippet#enable_snipmate_compatibility = 1

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Enable neosnippets when using go
let g:go_snippet_engine = "neosnippet"

" Disable the neosnippet preview candidate window
" When enabled, there can be too much visual noise
" especially when splits are used.
set completeopt-=preview

" ==================== ale ======================
let g:ale_sign_column_always = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = 'never'
" stop linters to run on opening a file
let g:ale_lint_on_enter = 0
nmap <silent> <C-h> <Plug>(ale_previous_wrap)

" ==================== vim-vue ======================
let g:vue_disable_pre_processors=1
set suffixesadd+=.vue

" ==================== vim-jsx ======================
let g:jsx_ext_required = 0

" ==================== vim wiki ======================
" Toggle checkbox of a list item on/off
nmap <leader>wl <Plug>VimwikiToggleListItem
" 标记为完成的 checklist 项目会有特别的颜色
let g:vimwiki_hl_cb_checked = 1
" 是否在计算字串长度时用特别考虑中文字符
let g:vimwiki_CJK_length = 1
" 设置完成的标记符号
let g:vimwiki_listsyms = '✗.○●✓'
" 可以导出markdown?"
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" ==================== init backup & views ======================
" Initialize directories {
function! InitializeDirectories()
    let parent = $HOME
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'undo': 'undodir',
                \ 'swap': 'directory' }
    " add views if you need it
    " \ 'views': 'viewdir',

    " Specify a directory in which to place the vimbackup,
    " vimviews, vimundo, and vimswap files/directories
    let common_dir = parent . '/.vim/'

    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()
" test undo!
