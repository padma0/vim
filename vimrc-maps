
" ==================== Defaults ================================
" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv
" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv

" paste without overwriting last yank
" vnoremap P "_dp
" vnoremap p "_dP
vnoremap p :<C-U>let @p = @+<CR>gvp:let @+ = @p<CR>

" cd current directory
nnoremap <leader>cd :cd %:p:h<CR>
" copy current file and line to clipboard
nnoremap <leader>cf :let @*=join([expand("%:p"), line(".")], ' #L')<CR>

" source vim config
nnoremap <Leader>sc :source $MYVIMRC<CR>

" search for visually selected text
vnoremap // "ay/<C-R>a<CR>

" search function in elixir
nnoremap <space>f "fyiw/\(def\(p\)\? \)\@<=<C-R>f\([(\|,\| ]\)\@=<CR>

" Yank from the cursor to the end of the line
nnoremap Y y$

" ==================== Buffers ================================
noremap <S-l> :bn<CR>
noremap <S-h> :bp<CR>
" set :bd to :bw if you want to totally destroy current buffer
nmap <C-b> :bw<CR>
nmap <leader>bw :bufdo bw<CR>

" ==================== Git ================================
" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" ==================== Fugitive ===================
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
" nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Git blame<CR>
" quit fugitiveblame
autocmd FileType fugitiveblame nmap <buffer> q gq
nnoremap <silent> <leader>gl :Glog<CR>
" nnoremap <silent> <leader>gp :Git push<CR>
" nnoremap <silent> <leader>gr :Gread<CR>
" nnoremap <silent> <leader>gw :Gwrite<CR>
" nnoremap <silent> <leader>ge :Gedit<CR>
" nnoremap <silent> <leader>gi :Git add -p %<CR>
" nnoremap <silent> <leader>gg :SignifyToggle<CR>

" ==================== nerdtree ===================
map <C-e> :NvimTreeToggle<CR>
map <leader>e :NvimTreeFindFile<CR>

" ==================== crtlp ===================
nnoremap <space>p :CtrlP<CR>
nnoremap <space>r :CtrlPMRU<CR>
nnoremap <space>b :CtrlPBuffer<CR>

" ==================== ctrlsf.vim ===================
nmap <C-a> <Plug>CtrlSFPrompt
vmap <C-a> "by<Plug>CtrlSFPrompt'<C-R>b'<CR>
" vmap <C-a> <Plug>CtrlSFVwordExec
nnoremap <C-j> :CtrlSFOpen<CR>

" ==================== gv.vim ===================
nnoremap <silent> <leader>gV :GV<CR>
nnoremap <silent> <leader>gv :GV!<CR>

" ==================== neovim/terminal =====================
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-\><C-n> <Esc>
endif


" -------------------------------------------------------------------------------------------
" coc.nvim default settings
" -------------------------------------------------------------------------------------------

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Search workspace symbols.
" no prefix - search for modules
" f prefix - search for functions
" t prefix - search for types
" c prefix - search for callbacks
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)
" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-k> <Plug>(coc-snippets-select)
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-k> <Plug>(coc-snippets-expand-jump)

let g:coc_snippet_prev = '<C-j>'
let g:coc_snippet_next = '<C-k>'

" ============= md-img-paste.vim =============
autocmd FileType markdown nmap <silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>
" there are some defaults for image directory and image name, you can change them
" let g:mdip_imgdir = 'img'
" let g:mdip_imgname = 'image'
let g:mdip_tmpname='' " 设置临时图片名为空可以按时间设置名字
let g:mdip_prefix = 'file:' " vimwiki 专用，可以回车打开图片

" ============== vim-http ==============
vnoremap <C-o> :Http<cr>

" ============== prettify json =========
vnoremap <C-j> :!jq<cr>

" ============== select shortcut ==============
nnoremap <space>j v^og_
xnoremap <space>k <Esc>
noremap <space>l g_
noremap <space>h ^
