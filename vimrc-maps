
" ==================== Defaults ================================
" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv
" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv

" paste without overwriting last yank
" vnoremap P "_dp
" vnoremap p "_dP
vnoremap p :<C-U>let @p = @+<CR>gvp:let @+ = @p<CR>

" cd current directory
nnoremap <leader>cd :cd %:p:h<CR>
" copy current file and line to clipboard
nnoremap <leader>cf :let @*=join([expand("%:p"), line(".")], ' #L')<CR>

" search for visually selected text
vnoremap // "ay/<C-R>a<CR>
" Yank from the cursor to the end of the line
nnoremap Y y$

" ==================== Buffers ================================
noremap <S-l> :bn<CR>
noremap <S-h> :bp<CR>
" set :bd to :bw if you want to totally destroy current buffer
nmap <C-b> :bw<CR>
nmap <leader>bw :bufdo bw<CR>

" ==================== Git ================================
" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" ==================== Fugitive ===================
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gi :Git add -p %<CR>
nnoremap <silent> <leader>gg :SignifyToggle<CR>

" ==================== neosnippet.vim ============================
" imap <C-k> <Plug>(neosnippet_expand_or_jump)
" smap <C-k> <Plug>(neosnippet_expand_or_jump)
" xmap <C-k> <Plug>(neosnippet_expand_target)
"

" ==================== crtlp ===================
nnoremap <space>p :CtrlP<CR>
nnoremap <space>r :CtrlPMRU<CR>
nnoremap <space>b :CtrlPBuffer<CR>

" ==================== nerdtree ===================
map <C-e> <plug>NERDTreeTabsToggle<CR>
map <leader>e :NERDTreeFind<CR>

" ==================== sneak.vim ===================
map f <Plug>Sneak_s
map F <Plug>Sneak_S

" ==================== ctrlsf.vim ===================
nmap <C-a> <Plug>CtrlSFPrompt
vmap <C-a> "by<Plug>CtrlSFPrompt'<C-R>b'<CR>
" vmap <C-a> <Plug>CtrlSFVwordExec
nnoremap <C-j> :CtrlSFOpen<CR>

" ==================== gv.vim ===================
nnoremap <silent> <leader>gV :GV<CR>
nnoremap <silent> <leader>gv :GV!<CR>

" ==================== open/reload vimrc ===================
" nnoremap <leader>ve :e $MYVIMRC<CR>
" nnoremap <leader>vs :so $MYVIMRC<CR>
" comment because they're not working well

" ==================== ale ======================
nmap <silent> <C-h> <Plug>(ale_previous_wrap)

" ==================== neovim/terminal =====================
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-\><C-n> <Esc>
endif


" -------------------------------------------------------------------------------------------------
" coc.nvim default settings
" -------------------------------------------------------------------------------------------------

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use U to show documentation in preview window
" nnoremap <silent> U :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
" vmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)
" Show all diagnostics
" nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
" nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
" nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
" nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" ==================== coc-snippets =========================
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)
" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
let g:coc_snippet_next = '<tab>'
